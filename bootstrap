#!/bin/sh
: ${KUSH_DIR:=$HOME/.kush}
: ${KUSH_BIN:=$KUSH_DIR/bin}

squawk () {
  # This function simplifies error reporting and verbosity
  # call it by preceding your message with a verbosity level
  # e.g. `squawk 3 "This is a squawk"`
  # if the current verbosity level is greater than or equal 
  # the number given then this function will echo out your message
  # and pad it with # to let you now how verbose that message was
  squawk_lvl=$1
  squawk=$2

  if [ "$VERBOSITY" -ge "$squawk_lvl" ] ; then
  count_squawk=0
    while [ "$count_squawk" -lt "$squawk_lvl" ]; do
      echo -n "#"
      count_squawk=`expr $count_squawk + 1`
    done
    echo " $squawk"
  fi
}

# Check if a command exists
check_cmd () {
  if ! test_cmd_loc="$(type -p "$1")" || [ -z "$test_cmd_loc" ]; then
    echo "$1 was not found in your path!"
    echo "To proceed please install $1 to your path and try again!"
    exit 1
  fi
}

# Check if a command exists, and if not install it
check_install () {
  if ! test_cmd_loc="$(type -p "$1")" || [ -z "$test_cmd_loc" ]; then
    echo "Installing $1"
    cd ~/.kush
    make $1
  else
    echo "$1 is already installed"
  fi
}

flight_checks () {
  # Let's display everything on stderr.
  exec 1>&2
  UNAME=$(uname)

  if [ "$UNAME" = "CYGWIN_NT-10.0" ] ; then
    PLATFORM="os.cygwin.x86_64"
    echo "WARNING: Cygwin is not supported at this time!"
    exit 1
  fi

  if [ "$UNAME" = "Linux" ] ; then
    squawk 1 " $UNAME is a Supported OS"
  elif [ "$UNAME" = "Darwin" -o "$UNAME" = "FreeBSD" ] ; then
    if [ "$VERBOSITY" -gt '1' ]; then
      echo " $UNAME is not a Supported OS"
      exit 1
    fi
  elif [ "$UNAME" ">" "MINGW" -a "$UNAME" "<" "MINGX" ] ; then
    if [ "$VERBOSITY" -gt '1' ]; then
      echo " $UNAME is not a Supported OS"
      exit 1
    fi
  else
    echo " $UNAME is not a Supported OS"
    echo "Sorry, this OS is not supported yet via this installer."
    exit 1
  fi

  if [ "$UNAME" = "Linux" ] ; then
    ### Linux ###
    LINUX_ARCH=$(uname -m)
    if [ "${LINUX_ARCH}" = "x86_64" ] ; then
      PLATFORM="os.linux.x86_64"
    else
      echo "Unusable architecture: ${LINUX_ARCH}"
      echo "ReactioNstall only supports x86_64 for now on Linux."
      exit 1
    fi
  fi

  # make reqs
  if [ "$PLATFORM" = "os.linux.x86_64" ] ; then
    echo "Installing on Linux"
  fi
}

main () {
  check_cmd git
  check_cmd ssh
  check_cmd ansible
  check_cmd curl
  check_cmd uname
  check_cmd go
  check_cmd parallel
  check_cmd 'grep'
  check_cmd 'sed'

  flight_checks

  if [ ! -d $KUSH_DIR ]; then
    git clone https://github.com/joshuacox/kush.git $KUSH_DIR
  else
    cd $KUSH_DIR
    git pull
  fi
  $KUSH_BIN/kush --auto-dotfiles
  check_install helm
  check_install packer
  #check_install crictl
  echo 'logout and log back in, or source your RC files'
}

main "$@"
